/*
 * @author Shelley King
 * @author Ben Boudra
 * @author William Price
 */

package descarteinterpreter;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class IdListTailNodeTest {
	
  ProgNode rule21Tree;
	ProgNode rule22Tree;
	ProgNode parent;
	TestingTools testTools;
	public IdListTailNodeTest() { }
        
	@Before
	public void setUp() {
		rule21Tree = this.buildTestTree21();
    rule22Tree = this.buildTestTree22();
		testTools = new TestingTools();
		parent = new ProgNode();
	}
	
	/**
	 * Test of populateChildren method, of class AssignStmtNode.
	 */
	@Test
	public void testAssignCase() {
	  	parent = new ProgNode();
		  parent.addChild(43, -1);
  	  IdListTailNode Assign1 = (IdListTailNode) parent.getChildAt(0);
		  DescartesToken dT1 = new DescartesToken("SOME PERIOD",0,-1);
  		Assign1.populateChildren(dT1);
	  	assertTrue(this.testTools.compareTrees(parent, rule22Tree));

      parent = new ProgNode();
		  parent.addChild(43, -1);
  		IdListTailNode Assign2 = (IdListTailNode) parent.getChildAt(0);
	  	DescartesToken dT2 = new DescartesToken("SOME COMMA",14,-1);
		  Assign2.populateChildren(dT2);
	  	assertTrue(this.testTools.compareTrees(parent, rule21Tree)); 
	}

  public ProgNode buildTestTree21() {
      ProgNode parent = new ProgNode();
		  parent.addChild(43, -1);
      IdListTailNode Assign = (IdListTailNode) parent.getChildAt(0);
      Assign.addChild(14, -1);
      Assign.addChild(7, -1);
      Assign.addChild(43, -1);
      return parent;
  }

	public ProgNode buildTestTree22() {
		  ProgNode parent = new ProgNode();
	    parent.addChild(43, -1);
	  	IdListTailNode Assign = (IdListTailNode) parent.getChildAt(0);
	  	return parent;
	}
}
